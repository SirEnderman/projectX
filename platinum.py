# -*- coding: utf-8 -*-
"""Platinum.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/145WJ3RSeRgwJuxBRNI_5-3N7gNDcra_F

# Platinum heart & liver disease predictor
Class 12 CS project by Aryan Patil, Priyansh Mishra and Rithwik Anand
"""

#github.com/realaryanpatil/Platinum

"""### This program requires datasets to work. Please download liver.csv and heart.csv from the [repository](https://github.com/realaryanpatil/Platinum) """

import pandas as pd

def trainheart(q1,q2,q3,q4,q5,q6,q7,q8,q9,q10,q11):
  dataset = pd.read_csv('medical.csv')
  X = dataset.iloc[:, :-1].values
  y = dataset.iloc[:, -1].values
    
  from sklearn.model_selection import train_test_split
  X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)

  from sklearn.preprocessing import StandardScaler
  sc = StandardScaler()
  X_train = sc.fit_transform(X_train)
  X_test = sc.transform(X_test)

  from sklearn.naive_bayes import GaussianNB
  classifier = GaussianNB()
  classifier.fit(X_train, y_train)

  result = classifier.predict(sc.transform([[q1,q2,q3,q4,q5,q6,q7,q8,q9,q10,q11]]))
  output = int(result)
  if output == 1:
    a1 = "The patient is at a high risk of heart failure."
  else:
    a1 = "The patient is at a low risk of heart failure."
  print(a1)

  y_pred = classifier.predict(X_test)
  from sklearn.metrics import accuracy_score 
  acscore = accuracy_score(y_test, y_pred)* 100
  bscore = int(acscore)
  print("Accuracy")
  return bscore
  
def livertrain(q1,q2,q3,q4,q5,q6,q7,q8,q9,q10):
  dataset = pd.read_csv('liver.csv')
  X = dataset.iloc[:, :-1].values
  y = dataset.iloc[:, -1].values
    
  from sklearn.model_selection import train_test_split
  X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)

  from sklearn.preprocessing import StandardScaler
  sc = StandardScaler()
  X_train = sc.fit_transform(X_train)
  X_test = sc.transform(X_test)

  from sklearn.naive_bayes import GaussianNB
  classifier = GaussianNB()
  classifier.fit(X_train, y_train)

  result = classifier.predict(sc.transform([[q1,q2,q3,q4,q5,q6,q7,q8,q9,q10]]))
  output = int(result)
  if output == 1:
    a1 = "The patient is at a high risk of liver disease."
  else:
    a1 = "The patient is at a low risk of liver disease."
  print(a1)

  y_pred = classifier.predict(X_test)
  from sklearn.metrics import accuracy_score 
  acscore = accuracy_score(y_test, y_pred)* 100
  bscore = int(acscore)
  print("Accuracy")
  return bscore

question = input("""Welcome to Platinum Argos [V1.0], A Naive Bayes classification system to detect heart/liver disease.

Please select your choice below:
[1] Heart failure risk analysis
[2] Liver disease risk analysis
--------------------------------------------------------------------------------------------------
:""")

if question == '1' or question == 'heart':
  print('---------------------------------------heart-----------------------------------------------')
  r1 = input("Patient age: ")
  r2 = input("Is the patient suffering from anemia? (y/n): ")
  if r2 == 'y':
    r2 = 1
  else:
    r2 = 0
  r3 = input("Creatine Phosphokinase levels (in micrograms per litre): ")
  r4 = input("Is the patient suffering from diabetes? (y/n): ")
  if r4 == 'y':
    r4 = 1
  else:
    r4 = 0
  r5 = input("Ejection Fraction (in %): ")
  r6 = input("Is the patient suffering from hypertension? (y/n): ")
  if r6 == 'y':
    r6 = 1
  else:
    r6 = 0
  r7 = input("Number of platelets: ")
  r8 = input("Serum Creatine levels: ")
  r9 = input("Serum Sodium levels: ")
  r10 = input("Gender (m/f): ")
  if r10 == 'm':
    r10 = 1
  else:
    r10 = 0
  r11 = input("Does the patient smoke? (y/n): ")
  if r11 == 'y':
    r11 = 1
  else:
    r11 = 0

  trainheart(r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11)

elif question == "2" or question = "liver":
  print('---------------------------------------liver-----------------------------------------------')
  r1 = input("Patient age: ")
  r2 = input("Patient gender (m/f): ")
  if r2 == 'm':
    r2 = 1
  else:
    r2 = 0
  r3 = input("Total Bilirubin: ")
  r4 = input("Direct Bilirubin: ")
  r5 = input("Alkaline Phosphotase: ")
  r6 = input("Alamine Aminotransferase:")
  r7 = input("Aspartate Aminotransferase: ")
  r8 = input("Total Protiens: ")
  r9 = input("Albumin levels: ")
  r10 = input("Albumin and Globulin Ratio: ")

  livertrain(r1,r2,r3,r4,r5,r6,r7,r8,r9,r10)

else:
  print("Wrong input. Please try again.")